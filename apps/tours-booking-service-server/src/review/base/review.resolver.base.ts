/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Review } from "./Review";
import { ReviewCountArgs } from "./ReviewCountArgs";
import { ReviewFindManyArgs } from "./ReviewFindManyArgs";
import { ReviewFindUniqueArgs } from "./ReviewFindUniqueArgs";
import { CreateReviewArgs } from "./CreateReviewArgs";
import { UpdateReviewArgs } from "./UpdateReviewArgs";
import { DeleteReviewArgs } from "./DeleteReviewArgs";
import { Customer } from "../../customer/base/Customer";
import { Tour } from "../../tour/base/Tour";
import { ReviewCreateInput } from "./ReviewCreateInput";
import { ReviewService } from "../review.service";
@graphql.Resolver(() => Review)
export class ReviewResolverBase {
  constructor(protected readonly service: ReviewService) {}

  async _reviewsMeta(
    @graphql.Args() args: ReviewCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Review])
  async reviews(@graphql.Args() args: ReviewFindManyArgs): Promise<Review[]> {
    return this.service.reviews(args);
  }

  @graphql.Query(() => Review, { nullable: true })
  async review(
    @graphql.Args() args: ReviewFindUniqueArgs
  ): Promise<Review | null> {
    const result = await this.service.review(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Review)
  async createReview(@graphql.Args() args: CreateReviewArgs): Promise<Review> {
    return await this.service.createReview({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,

        tour: args.data.tour
          ? {
              connect: args.data.tour,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Review)
  async updateReview(
    @graphql.Args() args: UpdateReviewArgs
  ): Promise<Review | null> {
    try {
      return await this.service.updateReview({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,

          tour: args.data.tour
            ? {
                connect: args.data.tour,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Review)
  async deleteReview(
    @graphql.Args() args: DeleteReviewArgs
  ): Promise<Review | null> {
    try {
      return await this.service.deleteReview(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  async getCustomer(
    @graphql.Parent() parent: Review
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tour, {
    nullable: true,
    name: "tour",
  })
  async getTour(@graphql.Parent() parent: Review): Promise<Tour | null> {
    const result = await this.service.getTour(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => String)
  async CreateReviewV1(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.CreateReviewV1(args);
  }

  @graphql.Mutation(() => Review)
  async CreateReviewV1_1234(
    @graphql.Args()
    args: ReviewCreateInput
  ): Promise<Review> {
    return this.service.CreateReviewV1_1234(args);
  }
}
