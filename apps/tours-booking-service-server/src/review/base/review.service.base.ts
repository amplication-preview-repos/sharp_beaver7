/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Review as PrismaReview,
  Customer as PrismaCustomer,
  Tour as PrismaTour,
} from "@prisma/client";

import { ReviewCreateInput } from "./ReviewCreateInput";
import { Review } from "./Review";

export class ReviewServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ReviewCountArgs, "select">): Promise<number> {
    return this.prisma.review.count(args);
  }

  async reviews(args: Prisma.ReviewFindManyArgs): Promise<PrismaReview[]> {
    return this.prisma.review.findMany(args);
  }
  async review(
    args: Prisma.ReviewFindUniqueArgs
  ): Promise<PrismaReview | null> {
    return this.prisma.review.findUnique(args);
  }
  async createReview(args: Prisma.ReviewCreateArgs): Promise<PrismaReview> {
    return this.prisma.review.create(args);
  }
  async updateReview(args: Prisma.ReviewUpdateArgs): Promise<PrismaReview> {
    return this.prisma.review.update(args);
  }
  async deleteReview(args: Prisma.ReviewDeleteArgs): Promise<PrismaReview> {
    return this.prisma.review.delete(args);
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.review
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }

  async getTour(parentId: string): Promise<PrismaTour | null> {
    return this.prisma.review
      .findUnique({
        where: { id: parentId },
      })
      .tour();
  }
  async CreateReviewV1(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async CreateReviewV1_1234(args: ReviewCreateInput): Promise<Review> {
    throw new Error("Not implemented");
  }
}
